

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue May 31 15:17:25 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.40
    24                           ; Generated 17/11/2021 GMT
    25                           ; 
    26                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4620 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	idataCOMRAM
    60  00FA8A                     __pidataCOMRAM:
    61                           	callstack 0
    62                           
    63                           ;initializer for main@F2815
    64  00FA8A  43                 	db	67
    65  00FA8B  7A                 	db	122
    66  00FA8C  61                 	db	97
    67  00FA8D  73                 	db	115
    68  00FA8E  3A                 	db	58
    69  00FA8F  20                 	db	32
    70  00FA90  20                 	db	32
    71  00FA91  20                 	db	32
    72  00FA92  20                 	db	32
    73  00FA93  20                 	db	32
    74  00FA94  20                 	db	32
    75  00FA95  20                 	db	32
    76  00FA96  20                 	db	32
    77  00FA97  20                 	db	32
    78  00FA98  20                 	db	32
    79  00FA99  20                 	db	32
    80  00FA9A  00                 	db	0
    81                           
    82                           ;initializer for main@F2811
    83  00FA9B  4D                 	db	77
    84  00FA9C  4F                 	db	79
    85  00FA9D  43                 	db	67
    86  00FA9E  3A                 	db	58
    87  00FA9F  20                 	db	32
    88  00FAA0  20                 	db	32
    89  00FAA1  20                 	db	32
    90  00FAA2  20                 	db	32
    91  00FAA3  20                 	db	32
    92  00FAA4  20                 	db	32
    93  00FAA5  20                 	db	32
    94  00FAA6  20                 	db	32
    95  00FAA7  20                 	db	32
    96  00FAA8  20                 	db	32
    97  00FAA9  20                 	db	32
    98  00FAAA  57                 	db	87
    99  00FAAB  00                 	db	0
   100  0000                     _ADRESL	set	4035
   101  0000                     _ADRESH	set	4036
   102  0000                     _ADCON0bits	set	4034
   103  0000                     _PORTBbits	set	3969
   104  0000                     _PORTD	set	3971
   105  0000                     _ADCON0	set	4034
   106  0000                     _TRISA	set	3986
   107  0000                     _ADCON2	set	4032
   108  0000                     _ADCON1	set	4033
   109  0000                     _PORTEbits	set	3972
   110  0000                     _TRISE	set	3990
   111  0000                     _TRISD	set	3989
   112  0000                     _TRISC	set	3988
   113  0000                     _TRISB	set	3987
   114                           
   115                           ; #config settings
   116                           
   117                           	psect	cinit
   118  00FAD2                     __pcinit:
   119                           	callstack 0
   120  00FAD2                     start_initialization:
   121                           	callstack 0
   122  00FAD2                     __initialization:
   123                           	callstack 0
   124                           
   125                           ; Initialize objects allocated to COMRAM (34 bytes)
   126                           ; load TBLPTR registers with __pidataCOMRAM
   127  00FAD2  0E8A               	movlw	low __pidataCOMRAM
   128  00FAD4  6EF6               	movwf	tblptrl,c
   129  00FAD6  0EFA               	movlw	high __pidataCOMRAM
   130  00FAD8  6EF7               	movwf	tblptrh,c
   131  00FADA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   132  00FADC  6EF8               	movwf	tblptru,c
   133  00FADE  EE00  F03B         	lfsr	0,__pdataCOMRAM
   134  00FAE2  EE10 F022          	lfsr	1,34
   135  00FAE6                     copy_data0:
   136  00FAE6  0009               	tblrd		*+
   137  00FAE8  CFF5 FFEE          	movff	tablat,postinc0
   138  00FAEC  50E5               	movf	postdec1,w,c
   139  00FAEE  50E1               	movf	fsr1l,w,c
   140  00FAF0  E1FA               	bnz	copy_data0
   141  00FAF2                     end_of_initialization:
   142                           	callstack 0
   143  00FAF2                     __end_of__initialization:
   144                           	callstack 0
   145  00FAF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   146  00FAF4  6EF8               	movwf	tblptru,c
   147  00FAF6  0100               	movlb	0
   148  00FAF8  EF4F  F07E         	goto	_main	;jump to C main() function
   149                           
   150                           	psect	dataCOMRAM
   151  00003B                     __pdataCOMRAM:
   152                           	callstack 0
   153  00003B                     main@F2815:
   154                           	callstack 0
   155  00003B                     	ds	17
   156  00004C                     main@F2811:
   157                           	callstack 0
   158  00004C                     	ds	17
   159                           
   160                           	psect	cstackCOMRAM
   161  000001                     __pcstackCOMRAM:
   162                           	callstack 0
   163  000001                     ?___wmul:
   164                           	callstack 0
   165  000001                     ?___awdiv:
   166                           	callstack 0
   167  000001                     lcd_wr@val:
   168                           	callstack 0
   169  000001                     delay@ms:
   170                           	callstack 0
   171  000001                     ___wmul@multiplier:
   172                           	callstack 0
   173  000001                     ___awdiv@dividend:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0x0
   177  000001                     	ds	1
   178  000002                     lcd_cmd@val:
   179                           	callstack 0
   180  000002                     lcd_dat@val:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0x1
   184  000002                     	ds	1
   185  000003                     delay@i:
   186                           	callstack 0
   187  000003                     lcd_str@str:
   188                           	callstack 0
   189  000003                     ___wmul@multiplicand:
   190                           	callstack 0
   191  000003                     ___awdiv@divisor:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x2
   195  000003                     	ds	2
   196  000005                     delay@j:
   197                           	callstack 0
   198  000005                     lcd_str@i:
   199                           	callstack 0
   200  000005                     ___awdiv@counter:
   201                           	callstack 0
   202  000005                     ___wmul@product:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0x4
   206  000005                     	ds	1
   207  000006                     ___awdiv@sign:
   208                           	callstack 0
   209                           
   210                           ; 1 bytes @ 0x5
   211  000006                     	ds	1
   212  000007                     ___awdiv@quotient:
   213                           	callstack 0
   214                           
   215                           ; 2 bytes @ 0x6
   216  000007                     	ds	2
   217  000009                     ??_main:
   218                           
   219                           ; 1 bytes @ 0x8
   220  000009                     	ds	2
   221  00000B                     main@pierwsza_linijka:
   222                           	callstack 0
   223                           
   224                           ; 17 bytes @ 0xA
   225  00000B                     	ds	17
   226  00001C                     main@druga_linijka:
   227                           	callstack 0
   228                           
   229                           ; 17 bytes @ 0x1B
   230  00001C                     	ds	17
   231  00002D                     _main$314:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0x2C
   235  00002D                     	ds	2
   236  00002F                     _main$315:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0x2E
   240  00002F                     	ds	2
   241  000031                     main@seconds:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0x30
   245  000031                     	ds	2
   246  000033                     main@stop:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0x32
   250  000033                     	ds	2
   251  000035                     main@minutes:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x34
   255  000035                     	ds	2
   256  000037                     main@czas:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0x36
   260  000037                     	ds	2
   261  000039                     main@moc:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x38
   265  000039                     	ds	2
   266                           
   267 ;;
   268 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   269 ;;
   270 ;; *************** function _main *****************
   271 ;; Defined at:
   272 ;;		line 156 in file "main.c"
   273 ;; Parameters:    Size  Location     Type
   274 ;;		None
   275 ;; Auto vars:     Size  Location     Type
   276 ;;  druga_linijk   17   27[COMRAM] unsigned char [17]
   277 ;;  pierwsza_lin   17   10[COMRAM] unsigned char [17]
   278 ;;  minutes         2   52[COMRAM] int 
   279 ;;  seconds         2   48[COMRAM] int 
   280 ;;  moc             2   56[COMRAM] int 
   281 ;;  czas            2   54[COMRAM] int 
   282 ;;  stop            2   50[COMRAM] int 
   283 ;; Return value:  Size  Location     Type
   284 ;;                  1    wreg      void 
   285 ;; Registers used:
   286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   287 ;; Tracked objects:
   288 ;;		On entry : 0/0
   289 ;;		On exit  : 0/0
   290 ;;		Unchanged: 0/0
   291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   293 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   295 ;;      Totals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   296 ;;Total ram usage:       50 bytes
   297 ;; Hardware stack levels required when called: 3
   298 ;; This function calls:
   299 ;;		___awdiv
   300 ;;		___wmul
   301 ;;		_delay
   302 ;;		_lcd_cmd
   303 ;;		_lcd_init
   304 ;;		_lcd_str
   305 ;; This function is called by:
   306 ;;		Startup code after reset
   307 ;; This function uses a non-reentrant model
   308 ;;
   309                           
   310                           	psect	text0
   311  00FC9E                     __ptext0:
   312                           	callstack 0
   313  00FC9E                     _main:
   314                           	callstack 28
   315  00FC9E                     
   316                           ;main.c: 159:     ADCON0 = 0x01;
   317  00FC9E  0E01               	movlw	1
   318  00FCA0  6EC2               	movwf	194,c	;volatile
   319                           
   320                           ;main.c: 160:     ADCON1 = 0x0B;
   321  00FCA2  0E0B               	movlw	11
   322  00FCA4  6EC1               	movwf	193,c	;volatile
   323                           
   324                           ;main.c: 161:     ADCON2 = 0x01;
   325  00FCA6  0E01               	movlw	1
   326  00FCA8  6EC0               	movwf	192,c	;volatile
   327                           
   328                           ;main.c: 163:     TRISA = 0xC3;
   329  00FCAA  0EC3               	movlw	195
   330  00FCAC  6E92               	movwf	146,c	;volatile
   331                           
   332                           ;main.c: 164:     TRISB = 0x3F;
   333  00FCAE  0E3F               	movlw	63
   334  00FCB0  6E93               	movwf	147,c	;volatile
   335                           
   336                           ;main.c: 165:     TRISC = 0x01;
   337  00FCB2  0E01               	movlw	1
   338  00FCB4  6E94               	movwf	148,c	;volatile
   339                           
   340                           ;main.c: 166:     TRISD = 0x00;
   341  00FCB6  0E00               	movlw	0
   342  00FCB8  6E95               	movwf	149,c	;volatile
   343                           
   344                           ;main.c: 167:     TRISE = 0x00;
   345  00FCBA  0E00               	movlw	0
   346  00FCBC  6E96               	movwf	150,c	;volatile
   347  00FCBE                     
   348                           ;main.c: 169:     lcd_init();
   349  00FCBE  ECBF  F07D         	call	_lcd_init	;wreg free
   350  00FCC2                     
   351                           ;main.c: 170:     lcd_cmd(0x01);
   352  00FCC2  0E01               	movlw	1
   353  00FCC4  EC33  F07D         	call	_lcd_cmd
   354  00FCC8                     
   355                           ;main.c: 172:     int moc = 800;
   356  00FCC8  0E03               	movlw	3
   357  00FCCA  6E3A               	movwf	(main@moc+1)^0,c
   358  00FCCC  0E20               	movlw	32
   359  00FCCE  6E39               	movwf	main@moc^0,c
   360  00FCD0                     
   361                           ;main.c: 173:     int czas = 0;
   362  00FCD0  0E00               	movlw	0
   363  00FCD2  6E38               	movwf	(main@czas+1)^0,c
   364  00FCD4  0E00               	movlw	0
   365  00FCD6  6E37               	movwf	main@czas^0,c
   366  00FCD8                     
   367                           ;main.c: 174:     int stop = 0;
   368  00FCD8  0E00               	movlw	0
   369  00FCDA  6E34               	movwf	(main@stop+1)^0,c
   370  00FCDC  0E00               	movlw	0
   371  00FCDE  6E33               	movwf	main@stop^0,c
   372  00FCE0                     l1150:
   373                           
   374                           ;main.c: 177:         delay(1000);
   375  00FCE0  0E03               	movlw	3
   376  00FCE2  6E02               	movwf	(delay@ms+1)^0,c
   377  00FCE4  0EE8               	movlw	232
   378  00FCE6  6E01               	movwf	delay@ms^0,c
   379  00FCE8  EC9B  F07D         	call	_delay	;wreg free
   380  00FCEC                     
   381                           ;main.c: 179:         if (PORTBbits.RB5 == 0) {
   382  00FCEC  BA81               	btfsc	129,5,c	;volatile
   383  00FCEE  EF7B  F07E         	goto	u371
   384  00FCF2  EF7D  F07E         	goto	u370
   385  00FCF6                     u371:
   386  00FCF6  EFBC  F07E         	goto	l1178
   387  00FCFA                     u370:
   388  00FCFA                     
   389                           ;main.c: 180:             moc =
   390  00FCFA  0EC8               	movlw	200
   391  00FCFC  1839               	xorwf	main@moc^0,w,c
   392  00FCFE  103A               	iorwf	(main@moc+1)^0,w,c
   393  00FD00  B4D8               	btfsc	status,2,c
   394  00FD02  EF85  F07E         	goto	u381
   395  00FD06  EF87  F07E         	goto	u380
   396  00FD0A                     u381:
   397  00FD0A  EFB8  F07E         	goto	l1176
   398  00FD0E                     u380:
   399  00FD0E  0E5E               	movlw	94
   400  00FD10  1839               	xorwf	main@moc^0,w,c
   401  00FD12  E108               	bnz	u390
   402  00FD14  043A               	decf	(main@moc+1)^0,w,c
   403  00FD16  B4D8               	btfsc	status,2,c
   404  00FD18  EF90  F07E         	goto	u391
   405  00FD1C  EF92  F07E         	goto	u390
   406  00FD20                     u391:
   407  00FD20  EFAE  F07E         	goto	l1172
   408  00FD24                     u390:
   409  00FD24  0E58               	movlw	88
   410  00FD26  1839               	xorwf	main@moc^0,w,c
   411  00FD28  E109               	bnz	u400
   412  00FD2A  0E02               	movlw	2
   413  00FD2C  183A               	xorwf	(main@moc+1)^0,w,c
   414  00FD2E  B4D8               	btfsc	status,2,c
   415  00FD30  EF9C  F07E         	goto	u401
   416  00FD34  EF9E  F07E         	goto	u400
   417  00FD38                     u401:
   418  00FD38  EFA4  F07E         	goto	l1168
   419  00FD3C                     u400:
   420  00FD3C  0E00               	movlw	0
   421  00FD3E  6E30               	movwf	(_main$315+1)^0,c
   422  00FD40  0EC8               	movlw	200
   423  00FD42  6E2F               	movwf	_main$315^0,c
   424  00FD44  EFA8  F07E         	goto	l1170
   425  00FD48                     l1168:
   426  00FD48  0E03               	movlw	3
   427  00FD4A  6E30               	movwf	(_main$315+1)^0,c
   428  00FD4C  0E20               	movlw	32
   429  00FD4E  6E2F               	movwf	_main$315^0,c
   430  00FD50                     l1170:
   431  00FD50  C02F  F02D         	movff	_main$315,_main$314
   432  00FD54  C030  F02E         	movff	_main$315+1,_main$314+1
   433  00FD58  EFB2  F07E         	goto	l1174
   434  00FD5C                     l1172:
   435  00FD5C  0E02               	movlw	2
   436  00FD5E  6E2E               	movwf	(_main$314+1)^0,c
   437  00FD60  0E58               	movlw	88
   438  00FD62  6E2D               	movwf	_main$314^0,c
   439  00FD64                     l1174:
   440  00FD64  C02D  F039         	movff	_main$314,main@moc
   441  00FD68  C02E  F03A         	movff	_main$314+1,main@moc+1
   442  00FD6C  EFBC  F07E         	goto	l1178
   443  00FD70                     l1176:
   444  00FD70  0E01               	movlw	1
   445  00FD72  6E3A               	movwf	(main@moc+1)^0,c
   446  00FD74  0E5E               	movlw	94
   447  00FD76  6E39               	movwf	main@moc^0,c
   448  00FD78                     l1178:
   449                           
   450                           ;main.c: 188:         if (PORTBbits.RB4 == 0) {
   451  00FD78  B881               	btfsc	129,4,c	;volatile
   452  00FD7A  EFC1  F07E         	goto	u411
   453  00FD7E  EFC3  F07E         	goto	u410
   454  00FD82                     u411:
   455  00FD82  EFDB  F07E         	goto	l90
   456  00FD86                     u410:
   457  00FD86                     
   458                           ;main.c: 189:             czas += 60;
   459  00FD86  0E3C               	movlw	60
   460  00FD88  2637               	addwf	main@czas^0,f,c
   461  00FD8A  0E00               	movlw	0
   462  00FD8C  2238               	addwfc	(main@czas+1)^0,f,c
   463                           
   464                           ;main.c: 190:             if (czas > 3600) {
   465  00FD8E  BE38               	btfsc	(main@czas+1)^0,7,c
   466  00FD90  EFD3  F07E         	goto	u421
   467  00FD94  0E11               	movlw	17
   468  00FD96  5C37               	subwf	main@czas^0,w,c
   469  00FD98  0E0E               	movlw	14
   470  00FD9A  5838               	subwfb	(main@czas+1)^0,w,c
   471  00FD9C  A0D8               	btfss	status,0,c
   472  00FD9E  EFD3  F07E         	goto	u421
   473  00FDA2  EFD5  F07E         	goto	u420
   474  00FDA6                     u421:
   475  00FDA6  EF70  F07E         	goto	l1150
   476  00FDAA                     u420:
   477  00FDAA                     l1182:
   478                           
   479                           ;main.c: 191:                 czas = 0;
   480  00FDAA  0E00               	movlw	0
   481  00FDAC  6E38               	movwf	(main@czas+1)^0,c
   482  00FDAE  0E00               	movlw	0
   483  00FDB0  6E37               	movwf	main@czas^0,c
   484  00FDB2  EF70  F07E         	goto	l1150
   485  00FDB6                     l90:
   486                           
   487                           ;main.c: 196:         if (PORTBbits.RB3 == 0) {
   488  00FDB6  B681               	btfsc	129,3,c	;volatile
   489  00FDB8  EFE0  F07E         	goto	u431
   490  00FDBC  EFE2  F07E         	goto	u430
   491  00FDC0                     u431:
   492  00FDC0  EFF6  F07E         	goto	l93
   493  00FDC4                     u430:
   494  00FDC4                     
   495                           ;main.c: 197:             czas += 10;
   496  00FDC4  0E0A               	movlw	10
   497  00FDC6  2637               	addwf	main@czas^0,f,c
   498  00FDC8  0E00               	movlw	0
   499  00FDCA  2238               	addwfc	(main@czas+1)^0,f,c
   500                           
   501                           ;main.c: 198:             if (czas > 3600) {
   502  00FDCC  BE38               	btfsc	(main@czas+1)^0,7,c
   503  00FDCE  EFF2  F07E         	goto	u441
   504  00FDD2  0E11               	movlw	17
   505  00FDD4  5C37               	subwf	main@czas^0,w,c
   506  00FDD6  0E0E               	movlw	14
   507  00FDD8  5838               	subwfb	(main@czas+1)^0,w,c
   508  00FDDA  A0D8               	btfss	status,0,c
   509  00FDDC  EFF2  F07E         	goto	u441
   510  00FDE0  EFF4  F07E         	goto	u440
   511  00FDE4                     u441:
   512  00FDE4  EF70  F07E         	goto	l1150
   513  00FDE8                     u440:
   514  00FDE8  EFD5  F07E         	goto	l1182
   515  00FDEC                     l93:
   516                           
   517                           ;main.c: 204:         if (PORTBbits.RB2 == 0) {
   518  00FDEC  B481               	btfsc	129,2,c	;volatile
   519  00FDEE  EFFB  F07E         	goto	u451
   520  00FDF2  EFFD  F07E         	goto	u450
   521  00FDF6                     u451:
   522  00FDF6  EF0A  F07F         	goto	l1190
   523  00FDFA                     u450:
   524  00FDFA                     
   525                           ;main.c: 205:             stop = !stop;
   526  00FDFA  5033               	movf	main@stop^0,w,c
   527  00FDFC  1034               	iorwf	(main@stop+1)^0,w,c
   528  00FDFE  B4D8               	btfsc	status,2,c
   529  00FE00  EF04  F07F         	goto	u461
   530  00FE04  EF07  F07F         	goto	u460
   531  00FE08                     u461:
   532  00FE08  0E01               	movlw	1
   533  00FE0A  EF08  F07F         	goto	u470
   534  00FE0E                     u460:
   535  00FE0E  0E00               	movlw	0
   536  00FE10                     u470:
   537  00FE10  6E33               	movwf	main@stop^0,c
   538  00FE12  6A34               	clrf	(main@stop+1)^0,c
   539  00FE14                     l1190:
   540                           
   541                           ;main.c: 208:         if (PORTBbits.RB1 == 0) {
   542  00FE14  B281               	btfsc	129,1,c	;volatile
   543  00FE16  EF0F  F07F         	goto	u481
   544  00FE1A  EF11  F07F         	goto	u480
   545  00FE1E                     u481:
   546  00FE1E  EF24  F07F         	goto	l1196
   547  00FE22                     u480:
   548  00FE22                     
   549                           ;main.c: 209:             if (stop == 0) {
   550  00FE22  5033               	movf	main@stop^0,w,c
   551  00FE24  1034               	iorwf	(main@stop+1)^0,w,c
   552  00FE26  A4D8               	btfss	status,2,c
   553  00FE28  EF18  F07F         	goto	u491
   554  00FE2C  EF1A  F07F         	goto	u490
   555  00FE30                     u491:
   556  00FE30  EF70  F07E         	goto	l1150
   557  00FE34                     u490:
   558  00FE34                     
   559                           ;main.c: 210:                 moc = 800;
   560  00FE34  0E03               	movlw	3
   561  00FE36  6E3A               	movwf	(main@moc+1)^0,c
   562  00FE38  0E20               	movlw	32
   563  00FE3A  6E39               	movwf	main@moc^0,c
   564                           
   565                           ;main.c: 211:                 czas = 0;
   566  00FE3C  0E00               	movlw	0
   567  00FE3E  6E38               	movwf	(main@czas+1)^0,c
   568  00FE40  0E00               	movlw	0
   569  00FE42  6E37               	movwf	main@czas^0,c
   570  00FE44  EF70  F07E         	goto	l1150
   571  00FE48                     l1196:
   572                           
   573                           ;main.c: 216:         if (stop == 1) {
   574  00FE48  0433               	decf	main@stop^0,w,c
   575  00FE4A  1034               	iorwf	(main@stop+1)^0,w,c
   576  00FE4C  A4D8               	btfss	status,2,c
   577  00FE4E  EF2B  F07F         	goto	u501
   578  00FE52  EF2D  F07F         	goto	u500
   579  00FE56                     u501:
   580  00FE56  EF43  F07F         	goto	l1204
   581  00FE5A                     u500:
   582  00FE5A                     
   583                           ;main.c: 217:             if (czas > 0) {
   584  00FE5A  BE38               	btfsc	(main@czas+1)^0,7,c
   585  00FE5C  EF38  F07F         	goto	u511
   586  00FE60  5038               	movf	(main@czas+1)^0,w,c
   587  00FE62  E108               	bnz	u510
   588  00FE64  0437               	decf	main@czas^0,w,c
   589  00FE66  A0D8               	btfss	status,0,c
   590  00FE68  EF38  F07F         	goto	u511
   591  00FE6C  EF3A  F07F         	goto	u510
   592  00FE70                     u511:
   593  00FE70  EF3F  F07F         	goto	l1202
   594  00FE74                     u510:
   595  00FE74                     
   596                           ;main.c: 218:                 czas--;
   597  00FE74  0637               	decf	main@czas^0,f,c
   598  00FE76  A0D8               	btfss	status,0,c
   599  00FE78  0638               	decf	(main@czas+1)^0,f,c
   600                           
   601                           ;main.c: 219:             } else {
   602  00FE7A  EF43  F07F         	goto	l1204
   603  00FE7E                     l1202:
   604                           
   605                           ;main.c: 220:                 stop = 0;
   606  00FE7E  0E00               	movlw	0
   607  00FE80  6E34               	movwf	(main@stop+1)^0,c
   608  00FE82  0E00               	movlw	0
   609  00FE84  6E33               	movwf	main@stop^0,c
   610  00FE86                     l1204:
   611                           
   612                           ;main.c: 224:         char pierwsza_linijka[] = "MOC:           W";
   613  00FE86  EE20  F04C         	lfsr	2,main@F2811
   614  00FE8A  EE10  F00B         	lfsr	1,main@pierwsza_linijka
   615  00FE8E  0E10               	movlw	16
   616  00FE90                     u521:
   617  00FE90  CFDB FFE3          	movff	plusw2,plusw1
   618  00FE94  06E8               	decf	wreg,f,c
   619  00FE96  E2FC               	bc	u521
   620  00FE98                     
   621                           ;main.c: 225:         pierwsza_linijka[12] = moc / 100 + '0';
   622  00FE98  C039  F001         	movff	main@moc,___awdiv@dividend
   623  00FE9C  C03A  F002         	movff	main@moc+1,___awdiv@dividend+1
   624  00FEA0  0E00               	movlw	0
   625  00FEA2  6E04               	movwf	(___awdiv@divisor+1)^0,c
   626  00FEA4  0E64               	movlw	100
   627  00FEA6  6E03               	movwf	___awdiv@divisor^0,c
   628  00FEA8  ECED  F07D         	call	___awdiv	;wreg free
   629  00FEAC  5001               	movf	?___awdiv^0,w,c
   630  00FEAE  0F30               	addlw	48
   631  00FEB0  6E17               	movwf	(main@pierwsza_linijka+12)^0,c
   632  00FEB2                     
   633                           ;main.c: 226:         pierwsza_linijka[13] = (moc / 10 - (moc / 100 * 10)) + '0';
   634  00FEB2  C039  F001         	movff	main@moc,___awdiv@dividend
   635  00FEB6  C03A  F002         	movff	main@moc+1,___awdiv@dividend+1
   636  00FEBA  0E00               	movlw	0
   637  00FEBC  6E04               	movwf	(___awdiv@divisor+1)^0,c
   638  00FEBE  0E0A               	movlw	10
   639  00FEC0  6E03               	movwf	___awdiv@divisor^0,c
   640  00FEC2  ECED  F07D         	call	___awdiv	;wreg free
   641  00FEC6  C001  F009         	movff	?___awdiv,??_main
   642  00FECA  C002  F00A         	movff	?___awdiv+1,??_main+1
   643  00FECE  C039  F001         	movff	main@moc,___awdiv@dividend
   644  00FED2  C03A  F002         	movff	main@moc+1,___awdiv@dividend+1
   645  00FED6  0E00               	movlw	0
   646  00FED8  6E04               	movwf	(___awdiv@divisor+1)^0,c
   647  00FEDA  0E64               	movlw	100
   648  00FEDC  6E03               	movwf	___awdiv@divisor^0,c
   649  00FEDE  ECED  F07D         	call	___awdiv	;wreg free
   650  00FEE2  5001               	movf	?___awdiv^0,w,c
   651  00FEE4  0DF6               	mullw	246
   652  00FEE6  50F3               	movf	243,w,c
   653  00FEE8  2409               	addwf	??_main^0,w,c
   654  00FEEA  0F30               	addlw	48
   655  00FEEC  6E18               	movwf	(main@pierwsza_linijka+13)^0,c
   656  00FEEE                     
   657                           ;main.c: 227:         pierwsza_linijka[14] = (moc - (moc / 100 * 100) - ((moc / 10 - (mo
      +                          c / 100 * 10)) * 10)) + '0';
   658  00FEEE  C039  F001         	movff	main@moc,___awdiv@dividend
   659  00FEF2  C03A  F002         	movff	main@moc+1,___awdiv@dividend+1
   660  00FEF6  0E00               	movlw	0
   661  00FEF8  6E04               	movwf	(___awdiv@divisor+1)^0,c
   662  00FEFA  0E0A               	movlw	10
   663  00FEFC  6E03               	movwf	___awdiv@divisor^0,c
   664  00FEFE  ECED  F07D         	call	___awdiv	;wreg free
   665  00FF02  5001               	movf	?___awdiv^0,w,c
   666  00FF04  0DF6               	mullw	246
   667  00FF06  50F3               	movf	243,w,c
   668  00FF08  2439               	addwf	main@moc^0,w,c
   669  00FF0A  0F30               	addlw	48
   670  00FF0C  6E19               	movwf	(main@pierwsza_linijka+14)^0,c
   671  00FF0E                     
   672                           ;main.c: 229:         int minutes = czas / 60;
   673  00FF0E  C037  F001         	movff	main@czas,___awdiv@dividend
   674  00FF12  C038  F002         	movff	main@czas+1,___awdiv@dividend+1
   675  00FF16  0E00               	movlw	0
   676  00FF18  6E04               	movwf	(___awdiv@divisor+1)^0,c
   677  00FF1A  0E3C               	movlw	60
   678  00FF1C  6E03               	movwf	___awdiv@divisor^0,c
   679  00FF1E  ECED  F07D         	call	___awdiv	;wreg free
   680  00FF22  C001  F035         	movff	?___awdiv,main@minutes
   681  00FF26  C002  F036         	movff	?___awdiv+1,main@minutes+1
   682  00FF2A                     
   683                           ;main.c: 230:         int seconds = czas - (minutes * 60);
   684  00FF2A  C035  F001         	movff	main@minutes,___wmul@multiplier
   685  00FF2E  C036  F002         	movff	main@minutes+1,___wmul@multiplier+1
   686  00FF32  0EFF               	movlw	255
   687  00FF34  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   688  00FF36  0EC4               	movlw	196
   689  00FF38  6E03               	movwf	___wmul@multiplicand^0,c
   690  00FF3A  EC56  F07D         	call	___wmul	;wreg free
   691  00FF3E  5037               	movf	main@czas^0,w,c
   692  00FF40  2401               	addwf	?___wmul^0,w,c
   693  00FF42  6E31               	movwf	main@seconds^0,c
   694  00FF44  5038               	movf	(main@czas+1)^0,w,c
   695  00FF46  2002               	addwfc	(?___wmul+1)^0,w,c
   696  00FF48  6E32               	movwf	(main@seconds+1)^0,c
   697  00FF4A                     
   698                           ;main.c: 232:         char druga_linijka[] = "Czas:           ";
   699  00FF4A  EE20  F03B         	lfsr	2,main@F2815
   700  00FF4E  EE10  F01C         	lfsr	1,main@druga_linijka
   701  00FF52  0E10               	movlw	16
   702  00FF54                     u531:
   703  00FF54  CFDB FFE3          	movff	plusw2,plusw1
   704  00FF58  06E8               	decf	wreg,f,c
   705  00FF5A  E2FC               	bc	u531
   706  00FF5C                     
   707                           ;main.c: 233:         druga_linijka[11] = minutes / 10 + '0';
   708  00FF5C  C035  F001         	movff	main@minutes,___awdiv@dividend
   709  00FF60  C036  F002         	movff	main@minutes+1,___awdiv@dividend+1
   710  00FF64  0E00               	movlw	0
   711  00FF66  6E04               	movwf	(___awdiv@divisor+1)^0,c
   712  00FF68  0E0A               	movlw	10
   713  00FF6A  6E03               	movwf	___awdiv@divisor^0,c
   714  00FF6C  ECED  F07D         	call	___awdiv	;wreg free
   715  00FF70  5001               	movf	?___awdiv^0,w,c
   716  00FF72  0F30               	addlw	48
   717  00FF74  6E27               	movwf	(main@druga_linijka+11)^0,c
   718  00FF76                     
   719                           ;main.c: 234:         druga_linijka[12] = minutes - (minutes / 10 * 10) + '0';
   720  00FF76  C035  F001         	movff	main@minutes,___awdiv@dividend
   721  00FF7A  C036  F002         	movff	main@minutes+1,___awdiv@dividend+1
   722  00FF7E  0E00               	movlw	0
   723  00FF80  6E04               	movwf	(___awdiv@divisor+1)^0,c
   724  00FF82  0E0A               	movlw	10
   725  00FF84  6E03               	movwf	___awdiv@divisor^0,c
   726  00FF86  ECED  F07D         	call	___awdiv	;wreg free
   727  00FF8A  5001               	movf	?___awdiv^0,w,c
   728  00FF8C  0DF6               	mullw	246
   729  00FF8E  50F3               	movf	243,w,c
   730  00FF90  2435               	addwf	main@minutes^0,w,c
   731  00FF92  0F30               	addlw	48
   732  00FF94  6E28               	movwf	(main@druga_linijka+12)^0,c
   733  00FF96                     
   734                           ;main.c: 235:         druga_linijka[13] = ':';
   735  00FF96  0E3A               	movlw	58
   736  00FF98  6E29               	movwf	(main@druga_linijka+13)^0,c
   737                           
   738                           ;main.c: 236:         druga_linijka[14] = seconds / 10 + '0';
   739  00FF9A  C031  F001         	movff	main@seconds,___awdiv@dividend
   740  00FF9E  C032  F002         	movff	main@seconds+1,___awdiv@dividend+1
   741  00FFA2  0E00               	movlw	0
   742  00FFA4  6E04               	movwf	(___awdiv@divisor+1)^0,c
   743  00FFA6  0E0A               	movlw	10
   744  00FFA8  6E03               	movwf	___awdiv@divisor^0,c
   745  00FFAA  ECED  F07D         	call	___awdiv	;wreg free
   746  00FFAE  5001               	movf	?___awdiv^0,w,c
   747  00FFB0  0F30               	addlw	48
   748  00FFB2  6E2A               	movwf	(main@druga_linijka+14)^0,c
   749  00FFB4                     
   750                           ;main.c: 237:         druga_linijka[15] = seconds - (seconds / 10 * 10) + '0';
   751  00FFB4  C031  F001         	movff	main@seconds,___awdiv@dividend
   752  00FFB8  C032  F002         	movff	main@seconds+1,___awdiv@dividend+1
   753  00FFBC  0E00               	movlw	0
   754  00FFBE  6E04               	movwf	(___awdiv@divisor+1)^0,c
   755  00FFC0  0E0A               	movlw	10
   756  00FFC2  6E03               	movwf	___awdiv@divisor^0,c
   757  00FFC4  ECED  F07D         	call	___awdiv	;wreg free
   758  00FFC8  5001               	movf	?___awdiv^0,w,c
   759  00FFCA  0DF6               	mullw	246
   760  00FFCC  50F3               	movf	243,w,c
   761  00FFCE  2431               	addwf	main@seconds^0,w,c
   762  00FFD0  0F30               	addlw	48
   763  00FFD2  6E2B               	movwf	(main@druga_linijka+15)^0,c
   764  00FFD4                     
   765                           ;main.c: 239:         lcd_cmd(0x80);
   766  00FFD4  0E80               	movlw	128
   767  00FFD6  EC33  F07D         	call	_lcd_cmd
   768  00FFDA                     
   769                           ;main.c: 240:         lcd_str(pierwsza_linijka);
   770  00FFDA  0E0B               	movlw	low main@pierwsza_linijka
   771  00FFDC  6E03               	movwf	lcd_str@str^0,c
   772  00FFDE  0E00               	movlw	high main@pierwsza_linijka
   773  00FFE0  6E04               	movwf	(lcd_str@str+1)^0,c
   774  00FFE2  EC7E  F07D         	call	_lcd_str	;wreg free
   775  00FFE6                     
   776                           ;main.c: 241:         lcd_cmd(0xC0);
   777  00FFE6  0EC0               	movlw	192
   778  00FFE8  EC33  F07D         	call	_lcd_cmd
   779  00FFEC                     
   780                           ;main.c: 242:         lcd_str(druga_linijka);
   781  00FFEC  0E1C               	movlw	low main@druga_linijka
   782  00FFEE  6E03               	movwf	lcd_str@str^0,c
   783  00FFF0  0E00               	movlw	high main@druga_linijka
   784  00FFF2  6E04               	movwf	(lcd_str@str+1)^0,c
   785  00FFF4  EC7E  F07D         	call	_lcd_str	;wreg free
   786  00FFF8  EF70  F07E         	goto	l1150
   787  00FFFC  EF00  F000         	goto	start
   788  010000                     __end_of_main:
   789                           	callstack 0
   790                           
   791 ;; *************** function _lcd_str *****************
   792 ;; Defined at:
   793 ;;		line 147 in file "main.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;  str             2    2[COMRAM] PTR const unsigned char 
   796 ;;		 -> main@druga_linijka(17), main@pierwsza_linijka(17), 
   797 ;; Auto vars:     Size  Location     Type
   798 ;;  i               1    4[COMRAM] unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   808 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   811 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   812 ;;Total ram usage:        3 bytes
   813 ;; Hardware stack levels used: 1
   814 ;; Hardware stack levels required when called: 2
   815 ;; This function calls:
   816 ;;		_lcd_dat
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text1
   823  00FAFC                     __ptext1:
   824                           	callstack 0
   825  00FAFC                     _lcd_str:
   826                           	callstack 28
   827  00FAFC                     
   828                           ;main.c: 148:     unsigned char i = 0;
   829  00FAFC  0E00               	movlw	0
   830  00FAFE  6E05               	movwf	lcd_str@i^0,c
   831                           
   832                           ;main.c: 150:     while (str[i] != 0) {
   833  00FB00  EF8C  F07D         	goto	l1086
   834  00FB04                     l1082:
   835                           
   836                           ;main.c: 151:         lcd_dat(str[i]);
   837  00FB04  5005               	movf	lcd_str@i^0,w,c
   838  00FB06  2403               	addwf	lcd_str@str^0,w,c
   839  00FB08  6ED9               	movwf	fsr2l,c
   840  00FB0A  0E00               	movlw	0
   841  00FB0C  2004               	addwfc	(lcd_str@str+1)^0,w,c
   842  00FB0E  6EDA               	movwf	fsr2h,c
   843  00FB10  50DF               	movf	indf2,w,c
   844  00FB12  EC3C  F07D         	call	_lcd_dat
   845  00FB16                     
   846                           ;main.c: 152:         i++;
   847  00FB16  2A05               	incf	lcd_str@i^0,f,c
   848  00FB18                     l1086:
   849                           
   850                           ;main.c: 150:     while (str[i] != 0) {
   851  00FB18  5005               	movf	lcd_str@i^0,w,c
   852  00FB1A  2403               	addwf	lcd_str@str^0,w,c
   853  00FB1C  6ED9               	movwf	fsr2l,c
   854  00FB1E  0E00               	movlw	0
   855  00FB20  2004               	addwfc	(lcd_str@str+1)^0,w,c
   856  00FB22  6EDA               	movwf	fsr2h,c
   857  00FB24  50DF               	movf	indf2,w,c
   858  00FB26  A4D8               	btfss	status,2,c
   859  00FB28  EF98  F07D         	goto	u301
   860  00FB2C  EF9A  F07D         	goto	u300
   861  00FB30                     u301:
   862  00FB30  EF82  F07D         	goto	l1082
   863  00FB34                     u300:
   864  00FB34  0012               	return		;funcret
   865  00FB36                     __end_of_lcd_str:
   866                           	callstack 0
   867                           
   868 ;; *************** function _lcd_dat *****************
   869 ;; Defined at:
   870 ;;		line 119 in file "main.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  val             1    wreg     unsigned char 
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  val             1    1[COMRAM] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, status,2, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   887 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   888 ;;Total ram usage:        1 bytes
   889 ;; Hardware stack levels used: 1
   890 ;; Hardware stack levels required when called: 1
   891 ;; This function calls:
   892 ;;		_lcd_wr
   893 ;; This function is called by:
   894 ;;		_lcd_str
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text2
   899  00FA78                     __ptext2:
   900                           	callstack 0
   901  00FA78                     _lcd_dat:
   902                           	callstack 28
   903                           
   904                           ;incstack = 0
   905                           ;lcd_dat@val stored from wreg
   906  00FA78  6E02               	movwf	lcd_dat@val^0,c
   907  00FA7A                     
   908                           ;main.c: 120:     PORTEbits.RE1 = 1;
   909  00FA7A  8284               	bsf	132,1,c	;volatile
   910  00FA7C                     
   911                           ;main.c: 121:     lcd_wr(val);
   912  00FA7C  5002               	movf	lcd_dat@val^0,w,c
   913  00FA7E  EC2F  F07D         	call	_lcd_wr
   914  00FA82                     
   915                           ;main.c: 122:     PORTEbits.RE2 = 1;
   916  00FA82  8484               	bsf	132,2,c	;volatile
   917  00FA84                     
   918                           ;main.c: 124:     PORTEbits.RE1 = 0;
   919  00FA84  9284               	bcf	132,1,c	;volatile
   920  00FA86                     
   921                           ;main.c: 126:     PORTEbits.RE1 = 1;
   922  00FA86  8284               	bsf	132,1,c	;volatile
   923  00FA88  0012               	return		;funcret
   924  00FA8A                     __end_of_lcd_dat:
   925                           	callstack 0
   926                           
   927 ;; *************** function _lcd_init *****************
   928 ;; Defined at:
   929 ;;		line 129 in file "main.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;		None
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg, status,2, status,0, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   947 ;;Total ram usage:        0 bytes
   948 ;; Hardware stack levels used: 1
   949 ;; Hardware stack levels required when called: 2
   950 ;; This function calls:
   951 ;;		_delay
   952 ;;		_lcd_cmd
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text3
   959  00FB7E                     __ptext3:
   960                           	callstack 0
   961  00FB7E                     _lcd_init:
   962                           	callstack 28
   963  00FB7E                     
   964                           ;main.c: 130:     PORTEbits.RE1 = 0;
   965  00FB7E  9284               	bcf	132,1,c	;volatile
   966                           
   967                           ;main.c: 131:     PORTEbits.RE2 = 0;
   968  00FB80  9484               	bcf	132,2,c	;volatile
   969  00FB82                     
   970                           ;main.c: 132:     delay(20);
   971  00FB82  0E00               	movlw	0
   972  00FB84  6E02               	movwf	(delay@ms+1)^0,c
   973  00FB86  0E14               	movlw	20
   974  00FB88  6E01               	movwf	delay@ms^0,c
   975  00FB8A  EC9B  F07D         	call	_delay	;wreg free
   976  00FB8E                     
   977                           ;main.c: 133:     PORTEbits.RE1 = 1;
   978  00FB8E  8284               	bsf	132,1,c	;volatile
   979  00FB90                     
   980                           ;main.c: 135:     lcd_cmd(0x38);
   981  00FB90  0E38               	movlw	56
   982  00FB92  EC33  F07D         	call	_lcd_cmd
   983  00FB96                     
   984                           ;main.c: 136:     delay(5);
   985  00FB96  0E00               	movlw	0
   986  00FB98  6E02               	movwf	(delay@ms+1)^0,c
   987  00FB9A  0E05               	movlw	5
   988  00FB9C  6E01               	movwf	delay@ms^0,c
   989  00FB9E  EC9B  F07D         	call	_delay	;wreg free
   990                           
   991                           ;main.c: 137:     lcd_cmd(0x38);
   992  00FBA2  0E38               	movlw	56
   993  00FBA4  EC33  F07D         	call	_lcd_cmd
   994  00FBA8                     
   995                           ;main.c: 138:     delay(1);
   996  00FBA8  0E00               	movlw	0
   997  00FBAA  6E02               	movwf	(delay@ms+1)^0,c
   998  00FBAC  0E01               	movlw	1
   999  00FBAE  6E01               	movwf	delay@ms^0,c
  1000  00FBB0  EC9B  F07D         	call	_delay	;wreg free
  1001  00FBB4                     
  1002                           ;main.c: 139:     lcd_cmd(0x38);
  1003  00FBB4  0E38               	movlw	56
  1004  00FBB6  EC33  F07D         	call	_lcd_cmd
  1005  00FBBA                     
  1006                           ;main.c: 140:     lcd_cmd(0x08);
  1007  00FBBA  0E08               	movlw	8
  1008  00FBBC  EC33  F07D         	call	_lcd_cmd
  1009  00FBC0                     
  1010                           ;main.c: 141:     lcd_cmd(0x0F);
  1011  00FBC0  0E0F               	movlw	15
  1012  00FBC2  EC33  F07D         	call	_lcd_cmd
  1013  00FBC6                     
  1014                           ;main.c: 142:     lcd_cmd(0x01);
  1015  00FBC6  0E01               	movlw	1
  1016  00FBC8  EC33  F07D         	call	_lcd_cmd
  1017  00FBCC                     
  1018                           ;main.c: 143:     lcd_cmd(0x38);
  1019  00FBCC  0E38               	movlw	56
  1020  00FBCE  EC33  F07D         	call	_lcd_cmd
  1021  00FBD2                     
  1022                           ;main.c: 144:     lcd_cmd(0x80);
  1023  00FBD2  0E80               	movlw	128
  1024  00FBD4  EC33  F07D         	call	_lcd_cmd
  1025  00FBD8  0012               	return		;funcret
  1026  00FBDA                     __end_of_lcd_init:
  1027                           	callstack 0
  1028                           
  1029 ;; *************** function _lcd_cmd *****************
  1030 ;; Defined at:
  1031 ;;		line 109 in file "main.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;  val             1    wreg     unsigned char 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;  val             1    1[COMRAM] unsigned char 
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, status,2, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1049 ;;Total ram usage:        1 bytes
  1050 ;; Hardware stack levels used: 1
  1051 ;; Hardware stack levels required when called: 1
  1052 ;; This function calls:
  1053 ;;		_lcd_wr
  1054 ;; This function is called by:
  1055 ;;		_lcd_init
  1056 ;;		_main
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text4
  1061  00FA66                     __ptext4:
  1062                           	callstack 0
  1063  00FA66                     _lcd_cmd:
  1064                           	callstack 28
  1065                           
  1066                           ;incstack = 0
  1067                           ;lcd_cmd@val stored from wreg
  1068  00FA66  6E02               	movwf	lcd_cmd@val^0,c
  1069  00FA68                     
  1070                           ;main.c: 110:     PORTEbits.RE1 = 1;
  1071  00FA68  8284               	bsf	132,1,c	;volatile
  1072  00FA6A                     
  1073                           ;main.c: 111:     lcd_wr(val);
  1074  00FA6A  5002               	movf	lcd_cmd@val^0,w,c
  1075  00FA6C  EC2F  F07D         	call	_lcd_wr
  1076  00FA70                     
  1077                           ;main.c: 112:     PORTEbits.RE2 = 0;
  1078  00FA70  9484               	bcf	132,2,c	;volatile
  1079  00FA72                     
  1080                           ;main.c: 114:     PORTEbits.RE1 = 0;
  1081  00FA72  9284               	bcf	132,1,c	;volatile
  1082  00FA74                     
  1083                           ;main.c: 116:     PORTEbits.RE1 = 1;
  1084  00FA74  8284               	bsf	132,1,c	;volatile
  1085  00FA76  0012               	return		;funcret
  1086  00FA78                     __end_of_lcd_cmd:
  1087                           	callstack 0
  1088                           
  1089 ;; *************** function _lcd_wr *****************
  1090 ;; Defined at:
  1091 ;;		line 105 in file "main.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;  val             1    wreg     unsigned char 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  val             1    0[COMRAM] unsigned char 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;Total ram usage:        1 bytes
  1110 ;; Hardware stack levels used: 1
  1111 ;; This function calls:
  1112 ;;		Nothing
  1113 ;; This function is called by:
  1114 ;;		_lcd_cmd
  1115 ;;		_lcd_dat
  1116 ;; This function uses a non-reentrant model
  1117 ;;
  1118                           
  1119                           	psect	text5
  1120  00FA5E                     __ptext5:
  1121                           	callstack 0
  1122  00FA5E                     _lcd_wr:
  1123                           	callstack 28
  1124                           
  1125                           ;incstack = 0
  1126                           ;lcd_wr@val stored from wreg
  1127  00FA5E  6E01               	movwf	lcd_wr@val^0,c
  1128  00FA60                     
  1129                           ;main.c: 106:     PORTD = val;
  1130  00FA60  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  1131  00FA64  0012               	return		;funcret
  1132  00FA66                     __end_of_lcd_wr:
  1133                           	callstack 0
  1134                           
  1135 ;; *************** function _delay *****************
  1136 ;; Defined at:
  1137 ;;		line 73 in file "main.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;  ms              2    0[COMRAM] unsigned int 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  i               2    2[COMRAM] unsigned int 
  1142 ;;  j               1    4[COMRAM] unsigned char 
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		wreg, status,2, status,0
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1152 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1153 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1155 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1156 ;;Total ram usage:        5 bytes
  1157 ;; Hardware stack levels used: 1
  1158 ;; This function calls:
  1159 ;;		Nothing
  1160 ;; This function is called by:
  1161 ;;		_lcd_init
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text6
  1167  00FB36                     __ptext6:
  1168                           	callstack 0
  1169  00FB36                     _delay:
  1170                           	callstack 29
  1171  00FB36                     
  1172                           ;main.c: 74:     unsigned int i;;main.c: 75:     unsigned char j;;main.c: 77:     for (i
      +                           = 0; i < ms; i++) {
  1173  00FB36  0E00               	movlw	0
  1174  00FB38  6E04               	movwf	(delay@i+1)^0,c
  1175  00FB3A  0E00               	movlw	0
  1176  00FB3C  6E03               	movwf	delay@i^0,c
  1177  00FB3E  EFB3  F07D         	goto	l1034
  1178  00FB42                     l1022:
  1179                           
  1180                           ;main.c: 79:         for (j = 0; j < 200; j++) {
  1181  00FB42  0E00               	movlw	0
  1182  00FB44  6E05               	movwf	delay@j^0,c
  1183  00FB46                     l35:
  1184                           
  1185                           ;main.c: 80:             __nop();
  1186  00FB46  F000               	nop	
  1187                           
  1188                           ;main.c: 81:             __nop();
  1189  00FB48  F000               	nop	
  1190                           
  1191                           ;main.c: 82:             __nop();
  1192  00FB4A  F000               	nop	
  1193                           
  1194                           ;main.c: 83:             __nop();
  1195  00FB4C  F000               	nop	
  1196                           
  1197                           ;main.c: 84:             __nop();
  1198  00FB4E  F000               	nop	
  1199  00FB50                     
  1200                           ;main.c: 85:         }
  1201  00FB50  2A05               	incf	delay@j^0,f,c
  1202  00FB52  0EC7               	movlw	199
  1203  00FB54  6405               	cpfsgt	delay@j^0,c
  1204  00FB56  EFAF  F07D         	goto	u281
  1205  00FB5A  EFB1  F07D         	goto	u280
  1206  00FB5E                     u281:
  1207  00FB5E  EFA3  F07D         	goto	l35
  1208  00FB62                     u280:
  1209  00FB62                     
  1210                           ;main.c: 86:     }
  1211  00FB62  4A03               	infsnz	delay@i^0,f,c
  1212  00FB64  2A04               	incf	(delay@i+1)^0,f,c
  1213  00FB66                     l1034:
  1214  00FB66  5001               	movf	delay@ms^0,w,c
  1215  00FB68  5C03               	subwf	delay@i^0,w,c
  1216  00FB6A  5002               	movf	(delay@ms+1)^0,w,c
  1217  00FB6C  5804               	subwfb	(delay@i+1)^0,w,c
  1218  00FB6E  A0D8               	btfss	status,0,c
  1219  00FB70  EFBC  F07D         	goto	u291
  1220  00FB74  EFBE  F07D         	goto	u290
  1221  00FB78                     u291:
  1222  00FB78  EFA1  F07D         	goto	l1022
  1223  00FB7C                     u290:
  1224  00FB7C  0012               	return		;funcret
  1225  00FB7E                     __end_of_delay:
  1226                           	callstack 0
  1227                           
  1228 ;; *************** function ___wmul *****************
  1229 ;; Defined at:
  1230 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  multiplier      2    0[COMRAM] unsigned int 
  1233 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  product         2    4[COMRAM] unsigned int 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  2    0[COMRAM] unsigned int 
  1238 ;; Registers used:
  1239 ;;		wreg, status,2, status,0, prodl, prodh
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;Total ram usage:        6 bytes
  1250 ;; Hardware stack levels used: 1
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text7
  1259  00FAAC                     __ptext7:
  1260                           	callstack 0
  1261  00FAAC                     ___wmul:
  1262                           	callstack 30
  1263  00FAAC  5001               	movf	___wmul@multiplier^0,w,c
  1264  00FAAE  0203               	mulwf	___wmul@multiplicand^0,c
  1265  00FAB0  CFF3 F005          	movff	prodl,___wmul@product
  1266  00FAB4  CFF4 F006          	movff	prodh,___wmul@product+1
  1267  00FAB8  5001               	movf	___wmul@multiplier^0,w,c
  1268  00FABA  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1269  00FABC  50F3               	movf	243,w,c
  1270  00FABE  2606               	addwf	(___wmul@product+1)^0,f,c
  1271  00FAC0  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1272  00FAC2  0203               	mulwf	___wmul@multiplicand^0,c
  1273  00FAC4  50F3               	movf	243,w,c
  1274  00FAC6  2606               	addwf	(___wmul@product+1)^0,f,c
  1275  00FAC8  C005  F001         	movff	___wmul@product,?___wmul
  1276  00FACC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1277  00FAD0  0012               	return		;funcret
  1278  00FAD2                     __end_of___wmul:
  1279                           	callstack 0
  1280                           
  1281 ;; *************** function ___awdiv *****************
  1282 ;; Defined at:
  1283 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  dividend        2    0[COMRAM] int 
  1286 ;;  divisor         2    2[COMRAM] int 
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  quotient        2    6[COMRAM] int 
  1289 ;;  sign            1    5[COMRAM] unsigned char 
  1290 ;;  counter         1    4[COMRAM] unsigned char 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  2    0[COMRAM] int 
  1293 ;; Registers used:
  1294 ;;		wreg, status,2, status,0
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1300 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1301 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1303 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;Total ram usage:        8 bytes
  1305 ;; Hardware stack levels used: 1
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		_main
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text8
  1314  00FBDA                     __ptext8:
  1315                           	callstack 0
  1316  00FBDA                     ___awdiv:
  1317                           	callstack 30
  1318  00FBDA  0E00               	movlw	0
  1319  00FBDC  6E06               	movwf	___awdiv@sign^0,c
  1320  00FBDE  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1321  00FBE0  EFF6  F07D         	goto	u310
  1322  00FBE4  EFF4  F07D         	goto	u311
  1323  00FBE8                     u311:
  1324  00FBE8  EFFC  F07D         	goto	l1102
  1325  00FBEC                     u310:
  1326  00FBEC  6C03               	negf	___awdiv@divisor^0,c
  1327  00FBEE  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1328  00FBF0  B0D8               	btfsc	status,0,c
  1329  00FBF2  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1330  00FBF4  0E01               	movlw	1
  1331  00FBF6  6E06               	movwf	___awdiv@sign^0,c
  1332  00FBF8                     l1102:
  1333  00FBF8  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1334  00FBFA  EF03  F07E         	goto	u320
  1335  00FBFE  EF01  F07E         	goto	u321
  1336  00FC02                     u321:
  1337  00FC02  EF09  F07E         	goto	l1108
  1338  00FC06                     u320:
  1339  00FC06  6C01               	negf	___awdiv@dividend^0,c
  1340  00FC08  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1341  00FC0A  B0D8               	btfsc	status,0,c
  1342  00FC0C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1343  00FC0E  0E01               	movlw	1
  1344  00FC10  1A06               	xorwf	___awdiv@sign^0,f,c
  1345  00FC12                     l1108:
  1346  00FC12  0E00               	movlw	0
  1347  00FC14  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1348  00FC16  0E00               	movlw	0
  1349  00FC18  6E07               	movwf	___awdiv@quotient^0,c
  1350  00FC1A  5003               	movf	___awdiv@divisor^0,w,c
  1351  00FC1C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1352  00FC1E  B4D8               	btfsc	status,2,c
  1353  00FC20  EF14  F07E         	goto	u331
  1354  00FC24  EF16  F07E         	goto	u330
  1355  00FC28                     u331:
  1356  00FC28  EF3E  F07E         	goto	l1130
  1357  00FC2C                     u330:
  1358  00FC2C  0E01               	movlw	1
  1359  00FC2E  6E05               	movwf	___awdiv@counter^0,c
  1360  00FC30  EF1E  F07E         	goto	l1116
  1361  00FC34                     l1114:
  1362  00FC34  90D8               	bcf	status,0,c
  1363  00FC36  3603               	rlcf	___awdiv@divisor^0,f,c
  1364  00FC38  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1365  00FC3A  2A05               	incf	___awdiv@counter^0,f,c
  1366  00FC3C                     l1116:
  1367  00FC3C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1368  00FC3E  EF23  F07E         	goto	u341
  1369  00FC42  EF25  F07E         	goto	u340
  1370  00FC46                     u341:
  1371  00FC46  EF1A  F07E         	goto	l1114
  1372  00FC4A                     u340:
  1373  00FC4A                     l1118:
  1374  00FC4A  90D8               	bcf	status,0,c
  1375  00FC4C  3607               	rlcf	___awdiv@quotient^0,f,c
  1376  00FC4E  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1377  00FC50  5003               	movf	___awdiv@divisor^0,w,c
  1378  00FC52  5C01               	subwf	___awdiv@dividend^0,w,c
  1379  00FC54  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1380  00FC56  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1381  00FC58  A0D8               	btfss	status,0,c
  1382  00FC5A  EF31  F07E         	goto	u351
  1383  00FC5E  EF33  F07E         	goto	u350
  1384  00FC62                     u351:
  1385  00FC62  EF38  F07E         	goto	l1126
  1386  00FC66                     u350:
  1387  00FC66  5003               	movf	___awdiv@divisor^0,w,c
  1388  00FC68  5E01               	subwf	___awdiv@dividend^0,f,c
  1389  00FC6A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1390  00FC6C  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1391  00FC6E  8007               	bsf	___awdiv@quotient^0,0,c
  1392  00FC70                     l1126:
  1393  00FC70  90D8               	bcf	status,0,c
  1394  00FC72  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1395  00FC74  3203               	rrcf	___awdiv@divisor^0,f,c
  1396  00FC76  2E05               	decfsz	___awdiv@counter^0,f,c
  1397  00FC78  EF25  F07E         	goto	l1118
  1398  00FC7C                     l1130:
  1399  00FC7C  5006               	movf	___awdiv@sign^0,w,c
  1400  00FC7E  B4D8               	btfsc	status,2,c
  1401  00FC80  EF44  F07E         	goto	u361
  1402  00FC84  EF46  F07E         	goto	u360
  1403  00FC88                     u361:
  1404  00FC88  EF4A  F07E         	goto	l1134
  1405  00FC8C                     u360:
  1406  00FC8C  6C07               	negf	___awdiv@quotient^0,c
  1407  00FC8E  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1408  00FC90  B0D8               	btfsc	status,0,c
  1409  00FC92  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1410  00FC94                     l1134:
  1411  00FC94  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1412  00FC98  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1413  00FC9C  0012               	return		;funcret
  1414  00FC9E                     __end_of___awdiv:
  1415                           	callstack 0
  1416  0000                     
  1417                           	psect	rparam
  1418  0000                     
  1419                           	psect	idloc
  1420                           
  1421                           ;Config register IDLOC0 @ 0x200000
  1422                           ;	unspecified, using default values
  1423  200000                     	org	2097152
  1424  200000  FF                 	db	255
  1425                           
  1426                           ;Config register IDLOC1 @ 0x200001
  1427                           ;	unspecified, using default values
  1428  200001                     	org	2097153
  1429  200001  FF                 	db	255
  1430                           
  1431                           ;Config register IDLOC2 @ 0x200002
  1432                           ;	unspecified, using default values
  1433  200002                     	org	2097154
  1434  200002  FF                 	db	255
  1435                           
  1436                           ;Config register IDLOC3 @ 0x200003
  1437                           ;	unspecified, using default values
  1438  200003                     	org	2097155
  1439  200003  FF                 	db	255
  1440                           
  1441                           ;Config register IDLOC4 @ 0x200004
  1442                           ;	unspecified, using default values
  1443  200004                     	org	2097156
  1444  200004  FF                 	db	255
  1445                           
  1446                           ;Config register IDLOC5 @ 0x200005
  1447                           ;	unspecified, using default values
  1448  200005                     	org	2097157
  1449  200005  FF                 	db	255
  1450                           
  1451                           ;Config register IDLOC6 @ 0x200006
  1452                           ;	unspecified, using default values
  1453  200006                     	org	2097158
  1454  200006  FF                 	db	255
  1455                           
  1456                           ;Config register IDLOC7 @ 0x200007
  1457                           ;	unspecified, using default values
  1458  200007                     	org	2097159
  1459  200007  FF                 	db	255
  1460                           
  1461                           	psect	config
  1462                           
  1463                           ; Padding undefined space
  1464  300000                     	org	3145728
  1465  300000  FF                 	db	255
  1466                           
  1467                           ;Config register CONFIG1H @ 0x300001
  1468                           ;	Oscillator Selection bits
  1469                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  1470                           ;	Fail-Safe Clock Monitor Enable bit
  1471                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1472                           ;	Internal/External Oscillator Switchover bit
  1473                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1474  300001                     	org	3145729
  1475  300001  06                 	db	6
  1476                           
  1477                           ;Config register CONFIG2L @ 0x300002
  1478                           ;	Power-up Timer Enable bit
  1479                           ;	PWRT = ON, PWRT enabled
  1480                           ;	Brown-out Reset Enable bits
  1481                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1482                           ;	Brown Out Reset Voltage bits
  1483                           ;	BORV = 3, Minimum setting
  1484  300002                     	org	3145730
  1485  300002  18                 	db	24
  1486                           
  1487                           ;Config register CONFIG2H @ 0x300003
  1488                           ;	Watchdog Timer Enable bit
  1489                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1490                           ;	Watchdog Timer Postscale Select bits
  1491                           ;	WDTPS = 32768, 1:32768
  1492  300003                     	org	3145731
  1493  300003  1E                 	db	30
  1494                           
  1495                           ; Padding undefined space
  1496  300004                     	org	3145732
  1497  300004  FF                 	db	255
  1498                           
  1499                           ;Config register CONFIG3H @ 0x300005
  1500                           ;	CCP2 MUX bit
  1501                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1502                           ;	PORTB A/D Enable bit
  1503                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1504                           ;	Low-Power Timer1 Oscillator Enable bit
  1505                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1506                           ;	MCLR Pin Enable bit
  1507                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1508  300005                     	org	3145733
  1509  300005  81                 	db	129
  1510                           
  1511                           ;Config register CONFIG4L @ 0x300006
  1512                           ;	Stack Full/Underflow Reset Enable bit
  1513                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1514                           ;	Single-Supply ICSP Enable bit
  1515                           ;	LVP = OFF, Single-Supply ICSP disabled
  1516                           ;	Extended Instruction Set Enable bit
  1517                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1518                           ;	Background Debugger Enable bit
  1519                           ;	DEBUG = 0x1, unprogrammed default
  1520  300006                     	org	3145734
  1521  300006  80                 	db	128
  1522                           
  1523                           ; Padding undefined space
  1524  300007                     	org	3145735
  1525  300007  FF                 	db	255
  1526                           
  1527                           ;Config register CONFIG5L @ 0x300008
  1528                           ;	Code Protection bit
  1529                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1530                           ;	Code Protection bit
  1531                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1532                           ;	Code Protection bit
  1533                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1534                           ;	Code Protection bit
  1535                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1536  300008                     	org	3145736
  1537  300008  0F                 	db	15
  1538                           
  1539                           ;Config register CONFIG5H @ 0x300009
  1540                           ;	Boot Block Code Protection bit
  1541                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1542                           ;	Data EEPROM Code Protection bit
  1543                           ;	CPD = OFF, Data EEPROM not code-protected
  1544  300009                     	org	3145737
  1545  300009  C0                 	db	192
  1546                           
  1547                           ;Config register CONFIG6L @ 0x30000A
  1548                           ;	Write Protection bit
  1549                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1550                           ;	Write Protection bit
  1551                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1552                           ;	Write Protection bit
  1553                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1554                           ;	Write Protection bit
  1555                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1556  30000A                     	org	3145738
  1557  30000A  0F                 	db	15
  1558                           
  1559                           ;Config register CONFIG6H @ 0x30000B
  1560                           ;	Configuration Register Write Protection bit
  1561                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1562                           ;	Boot Block Write Protection bit
  1563                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1564                           ;	Data EEPROM Write Protection bit
  1565                           ;	WRTD = OFF, Data EEPROM not write-protected
  1566  30000B                     	org	3145739
  1567  30000B  E0                 	db	224
  1568                           
  1569                           ;Config register CONFIG7L @ 0x30000C
  1570                           ;	Table Read Protection bit
  1571                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1572                           ;	Table Read Protection bit
  1573                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1574                           ;	Table Read Protection bit
  1575                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1576                           ;	Table Read Protection bit
  1577                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1578  30000C                     	org	3145740
  1579  30000C  0F                 	db	15
  1580                           
  1581                           ;Config register CONFIG7H @ 0x30000D
  1582                           ;	Boot Block Table Read Protection bit
  1583                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1584  30000D                     	org	3145741
  1585  30000D  40                 	db	64
  1586                           tosu	equ	0xFFF
  1587                           tosh	equ	0xFFE
  1588                           tosl	equ	0xFFD
  1589                           stkptr	equ	0xFFC
  1590                           pclatu	equ	0xFFB
  1591                           pclath	equ	0xFFA
  1592                           pcl	equ	0xFF9
  1593                           tblptru	equ	0xFF8
  1594                           tblptrh	equ	0xFF7
  1595                           tblptrl	equ	0xFF6
  1596                           tablat	equ	0xFF5
  1597                           prodh	equ	0xFF4
  1598                           prodl	equ	0xFF3
  1599                           indf0	equ	0xFEF
  1600                           postinc0	equ	0xFEE
  1601                           postdec0	equ	0xFED
  1602                           preinc0	equ	0xFEC
  1603                           plusw0	equ	0xFEB
  1604                           fsr0h	equ	0xFEA
  1605                           fsr0l	equ	0xFE9
  1606                           wreg	equ	0xFE8
  1607                           indf1	equ	0xFE7
  1608                           postinc1	equ	0xFE6
  1609                           postdec1	equ	0xFE5
  1610                           preinc1	equ	0xFE4
  1611                           plusw1	equ	0xFE3
  1612                           fsr1h	equ	0xFE2
  1613                           fsr1l	equ	0xFE1
  1614                           bsr	equ	0xFE0
  1615                           indf2	equ	0xFDF
  1616                           postinc2	equ	0xFDE
  1617                           postdec2	equ	0xFDD
  1618                           preinc2	equ	0xFDC
  1619                           plusw2	equ	0xFDB
  1620                           fsr2h	equ	0xFDA
  1621                           fsr2l	equ	0xFD9
  1622                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        34
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     58      92
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 17
		 -> main@druga_linijka(COMRAM[17]), main@pierwsza_linijka(COMRAM[17]), 


Critical Paths under _main in COMRAM

    _main->___awdiv
    _lcd_str->_lcd_dat
    _lcd_dat->_lcd_wr
    _lcd_init->_delay
    _lcd_cmd->_lcd_wr

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0    4003
                                              8 COMRAM    50    50      0
                            ___awdiv
                             ___wmul
                              _delay
                            _lcd_cmd
                           _lcd_init
                            _lcd_str
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              3     1      2     286
                                              2 COMRAM     3     1      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0      44
                                              1 COMRAM     1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     440
                              _delay
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0      44
                                              1 COMRAM     1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     396
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1668
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___wmul
   _delay
   _lcd_cmd
     _lcd_wr
   _lcd_init
     _delay
     _lcd_cmd
   _lcd_str
     _lcd_dat
       _lcd_wr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3A      5C       1       72.4%
BITBIGSFRhh         3B      0       0      36        0.0%
BITBIGSFRlhh        29      0       0      37        0.0%
BITBIGSFRlhl         D      0       0      38        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
BITBIGSFRlll         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5C      41        0.0%
DATA                 0      0      5C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue May 31 15:17:25 2022

                     l35 FB46                       l52 FA64                       l61 FBD8  
                     l38 FB7C                       l55 FA76                       l58 FA88  
                     l90 FDB6                       l67 FB34                       l93 FDEC  
           ___awdiv@sign 0006      ___wmul@multiplicand 0003                      l109 FAD0  
                    l340 FC9C                      u300 FB34                      u301 FB30  
                    u310 FBEC                      u311 FBE8                      u320 FC06  
                    u400 FD3C                      u321 FC02                      u401 FD38  
                    u330 FC2C                      u410 FD86                      u331 FC28  
                    u411 FD82                      u340 FC4A                      u500 FE5A  
                    u420 FDAA                      u341 FC46                      u501 FE56  
                    u421 FDA6                      u350 FC66                      u510 FE74  
                    u430 FDC4                      u351 FC62                      u511 FE70  
                    u431 FDC0                      u360 FC8C                      u280 FB62  
                    u440 FDE8                      u361 FC88                      u281 FB5E  
                    u521 FE90                      u441 FDE4                      u290 FB7C  
                    u450 FDFA                      u370 FCFA                      u291 FB78  
                    u531 FF54                      u451 FDF6                      u371 FCF6  
                    u460 FE0E                      u380 FD0E                      u461 FE08  
                    u381 FD0A                      u470 FE10                      u390 FD24  
                    u391 FD20                      u480 FE22                      u481 FE1E  
                    u490 FE34                      u491 FE30                      wreg 000FE8  
                   l1100 FBF4                     l1020 FB36                     l1110 FC1A  
                   l1102 FBF8                     l1030 FB52                     l1022 FB42  
                   l1120 FC50                     l1112 FC2C                     l1104 FC06  
                   l1032 FB62                     l1040 FA70                     l1200 FE74  
                   l1122 FC66                     l1114 FC34                     l1130 FC7C  
                   l1106 FC0E                     l1034 FB66                     l1018 FA60  
                   l1042 FA72                     l1050 FA82                     l1210 FEEE  
                   l1202 FE7E                     l1132 FC8C                     l1124 FC6E  
                   l1116 FC3C                     l1108 FC12                     l1028 FB50  
                   l1044 FA74                     l1036 FA68                     l1060 FB8E  
                   l1052 FA84                     l1220 FF76                     l1212 FF0E  
                   l1204 FE86                     l1140 FCBE                     l1134 FC94  
                   l1126 FC70                     l1118 FC4A                     l1038 FA6A  
                   l1070 FBBA                     l1062 FB90                     l1054 FA86  
                   l1046 FA7A                     l1230 FFE6                     l1222 FF96  
                   l1214 FF2A                     l1206 FE98                     l1150 FCE0  
                   l1142 FCC2                     l1128 FC76                     l1072 FBC0  
                   l1064 FB96                     l1056 FB7E                     l1048 FA7C  
                   l1080 FAFC                     l1232 FFEC                     l1224 FFB4  
                   l1216 FF4A                     l1208 FEB2                     l1152 FCEC  
                   l1144 FCC8                     l1090 FAC8                     l1074 FBC6  
                   l1066 FBA8                     l1058 FB82                     l1082 FB04  
                   l1226 FFD4                     l1218 FF5C                     l1170 FD50  
                   l1162 FD3C                     l1154 FCFA                     l1146 FCD0  
                   l1138 FC9E                     l1076 FBCC                     l1068 FBB4  
                   l1084 FB16                     l1228 FFDA                     l1180 FD86  
                   l1172 FD5C                     l1156 FD0E                     l1148 FCD8  
                   l1094 FBDA                     l1078 FBD2                     l1086 FB18  
                   l1190 FE14                     l1182 FDAA                     l1174 FD64  
                   l1166 FD3C                     l1158 FD24                     l1096 FBDE  
                   l1088 FAAC                     l1192 FE22                     l1184 FDC4  
                   l1168 FD48                     l1176 FD70                     l1098 FBEC  
                   l1194 FE34                     l1178 FD78                     l1196 FE48  
                   l1188 FDFA                     l1198 FE5A              main@minutes 0035  
            main@seconds 0031                     _main FC9E                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000             ___param_bank 000000  
                  ?_main 0001          __end_of___awdiv FC9E          ___awdiv@divisor 0003  
        ___awdiv@counter 0005                    _PORTD 000F83                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96          __end_of_lcd_dat FA8A          __end_of_lcd_cmd FA78  
        __end_of_lcd_str FB36                    _delay FB36                    tablat 000FF5  
                  plusw1 000FE3                    plusw2 000FDB     main@pierwsza_linijka 000B  
                  status 000FD8          __initialization FAD2             __end_of_main 0000  
                 ??_main 0009            __activetblptr 000002                   ?_delay 0001  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0001  
       __end_of_lcd_init FBDA                   ___wmul FAAC                ??___awdiv 0005  
                 _lcd_wr FA5E                   delay@i 0003                   delay@j 0005  
       ___awdiv@quotient 0007                   isa$std 000001                ??_lcd_dat 0002  
              ??_lcd_cmd 0002                ??_lcd_str 0005             __pdataCOMRAM 003B  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization FAF2            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_delay FB7E                  ??_delay 0003  
                ?___wmul 0001                  ?_lcd_wr 0001                ?_lcd_init 0001  
                __Hparam 0000                  __Lparam 0000                  ___awdiv FBDA  
                __pcinit FAD2                  __ramtop 1000                  __ptext0 FC9E  
                __ptext1 FAFC                  __ptext2 FA78                  __ptext3 FB7E  
                __ptext4 FA66                  __ptext5 FA5E                  __ptext6 FB36  
                __ptext7 FAAC                  __ptext8 FBDA                  _lcd_dat FA78  
                _lcd_cmd FA66                  _lcd_str FAFC                  delay@ms 0001  
                main@moc 0039               ??_lcd_init 0006     end_of_initialization FAF2  
          __Lmediumconst 0000                  postdec1 000FE5                  postinc0 000FEE  
              _PORTBbits 000F81                _PORTEbits 000F84               lcd_dat@val 0002  
             lcd_cmd@val 0002               lcd_str@str 0003           __end_of___wmul FAD2  
          __pidataCOMRAM FA8A           __end_of_lcd_wr FA66      start_initialization FAD2  
               ??___wmul 0005                 ??_lcd_wr 0001                 ?___awdiv 0001  
               ?_lcd_dat 0001                 ?_lcd_cmd 0001                 ?_lcd_str 0003  
         ___wmul@product 0005                main@F2811 004C                main@F2815 003B  
             _ADCON0bits 000FC2        ___wmul@multiplier 0001                lcd_wr@val 0001  
              copy_data0 FAE6                 __Hrparam 0000                 __Lrparam 0000  
               _main$314 002D                 _main$315 002F                 _lcd_init FB7E  
               isa$xinst 000000                 main@czas 0037                 lcd_str@i 0005  
               main@stop 0033        main@druga_linijka 001C  
